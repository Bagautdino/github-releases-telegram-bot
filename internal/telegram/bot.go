package telegram

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Store interface for bot commands  
type Store interface {
	AddRepository(ctx context.Context, owner, name string, trackPrereleases bool) error
	RemoveRepository(ctx context.Context, owner, name string) error
	ListRepositories(ctx context.Context) ([]Repository, error)
	AddChat(ctx context.Context, chatID int64, title, language string) error
	RemoveChat(ctx context.Context, chatID int64) error
	ListChats(ctx context.Context) ([]Chat, error)
}

// JobRunner interface for triggering release checks
type JobRunner interface {
	TriggerCheck(ctx context.Context) error
}

// LLMAdvisor interface for testing LLM
type LLMAdvisor interface {
	Advise(ctx context.Context, repo, tag string, bullets []string) (string, error)
}

// Repository represents a repository for bot operations
type Repository struct {
	Owner            string
	Name             string
	TrackPrereleases bool
}

// Chat represents a chat for bot operations
type Chat struct {
	ID       int64
	Title    string
	Language string
}

// Bot handles Telegram bot commands
type Bot struct {
	api          *tgbotapi.BotAPI
	store        Store
	jobRunner    JobRunner
	llmAdvisor   LLMAdvisor
	allowedUsers map[int64]bool
	logger       *slog.Logger
}

// NewBot creates a new bot instance
func NewBot(token string, store Store, jobRunner JobRunner, llmAdvisor LLMAdvisor, allowedUserIDs []int64, logger *slog.Logger) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	allowedUsers := make(map[int64]bool)
	for _, id := range allowedUserIDs {
		allowedUsers[id] = true
	}

	return &Bot{
		api:          api,
		store:        store,
		jobRunner:    jobRunner,
		llmAdvisor:   llmAdvisor,
		allowedUsers: allowedUsers,
		logger:       logger,
	}, nil
}

// StartPolling starts polling for updates
func (b *Bot) StartPolling(ctx context.Context) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case <-ctx.Done():
			b.api.StopReceivingUpdates()
			return
		case update := <-updates:
			if update.Message != nil {
				go b.handleMessage(ctx, update.Message)
			}
		}
	}
}

// handleMessage processes incoming messages
func (b *Bot) handleMessage(ctx context.Context, message *tgbotapi.Message) {
	// Check if user is allowed to use commands
	if !b.allowedUsers[message.From.ID] {
		return
	}

	if !message.IsCommand() {
		return
	}

	command := message.Command()
	args := message.CommandArguments()

	b.logger.Info("Processing command",
		"command", command,
		"args", args,
		"user_id", message.From.ID,
		"chat_id", message.Chat.ID)

	var response string
	var err error

	switch command {
	case "addrepo":
		response, err = b.handleAddRepo(ctx, args)
	case "delrepo":
		response, err = b.handleDelRepo(ctx, args)
	case "list":
		response, err = b.handleList(ctx)
	case "setchat":
		response, err = b.handleSetChat(ctx, message.Chat.ID, args)
	case "test":
		response = "‚úÖ Bot is working!"
	case "help":
		response = b.getHelpText()
	case "forcecheck":
		response, err = b.handleForceCheck(ctx)
	case "addtestrepo":
		response, err = b.handleAddTestRepo(ctx)
	case "testnotify":
		response, err = b.handleTestNotify(ctx, message.Chat.ID)
	case "testllm":
		response, err = b.handleTestLLM(ctx, message.Chat.ID)
	default:
		response = "Unknown command. Use /help for available commands."
	}

	if err != nil {
		b.logger.Error("Command execution failed", "command", command, "error", err)
		response = fmt.Sprintf("‚ùå Error: %v", err)
	}

	// Send response
	msg := tgbotapi.NewMessage(message.Chat.ID, response)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

// handleAddRepo handles /addrepo command
func (b *Bot) handleAddRepo(ctx context.Context, args string) (string, error) {
	parts := strings.Fields(args)
	if len(parts) < 1 {
		return "Usage: /addrepo owner/repo [--pre]", nil
	}

	repoParts := strings.Split(parts[0], "/")
	if len(repoParts) != 2 {
		return "Invalid format. Use: owner/repo", nil
	}

	owner := repoParts[0]
	name := repoParts[1]
	trackPrereleases := false

	// Check for --pre flag
	for _, part := range parts[1:] {
		if part == "--pre" {
			trackPrereleases = true
			break
		}
	}

	err := b.store.AddRepository(ctx, owner, name, trackPrereleases)
	if err != nil {
		return "", err
	}

	prereText := ""
	if trackPrereleases {
		prereText = " (including prereleases)"
	}

	return fmt.Sprintf("‚úÖ Added repository <b>%s/%s</b>%s", owner, name, prereText), nil
}

// handleDelRepo handles /delrepo command
func (b *Bot) handleDelRepo(ctx context.Context, args string) (string, error) {
	repoParts := strings.Split(strings.TrimSpace(args), "/")
	if len(repoParts) != 2 {
		return "Usage: /delrepo owner/repo", nil
	}

	owner := repoParts[0]
	name := repoParts[1]

	err := b.store.RemoveRepository(ctx, owner, name)
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("‚úÖ Removed repository <b>%s/%s</b>", owner, name), nil
}

// handleList handles /list command
func (b *Bot) handleList(ctx context.Context) (string, error) {
	repos, err := b.store.ListRepositories(ctx)
	if err != nil {
		return "", err
	}

	if len(repos) == 0 {
		return "No repositories are being tracked.", nil
	}

	var response strings.Builder
	response.WriteString("<b>Tracked repositories:</b>\n\n")

	for _, repo := range repos {
		response.WriteString(fmt.Sprintf("‚Ä¢ <b>%s/%s</b>", repo.Owner, repo.Name))
		if repo.TrackPrereleases {
			response.WriteString(" (with prereleases)")
		}
		response.WriteString("\n")
	}

	return response.String(), nil
}

// handleSetChat handles /setchat command
func (b *Bot) handleSetChat(ctx context.Context, currentChatID int64, args string) (string, error) {
	var chatID int64
	var err error

	if args == "" {
		chatID = currentChatID
	} else {
		chatID, err = strconv.ParseInt(strings.TrimSpace(args), 10, 64)
		if err != nil {
			return "Invalid chat ID format", nil
		}
	}

	// Get chat title if possible
	title := fmt.Sprintf("Chat %d", chatID)
	if chatID == currentChatID {
		title = "Current Chat"
	}

	err = b.store.AddChat(ctx, chatID, title, "ru")
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("‚úÖ Chat <b>%d</b> has been added to notifications", chatID), nil
}

// handleForceCheck handles /forcecheck command
func (b *Bot) handleForceCheck(ctx context.Context) (string, error) {
	if b.jobRunner == nil {
		return "‚ùå Force check not available", nil
	}

	b.logger.Info("Manual release check triggered")
	
	go func() {
		if err := b.jobRunner.TriggerCheck(ctx); err != nil {
			b.logger.Error("Manual release check failed", "error", err)
		}
	}()

	return "üîÑ Manual release check started...", nil
}

// handleAddTestRepo handles /addtestrepo command
func (b *Bot) handleAddTestRepo(ctx context.Context) (string, error) {
	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å —á–∞—Å—Ç—ã–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	testRepos := []struct {
		owner, name string
		description string
	}{
		{"actions", "runner", "GitHub Actions Runner (—á–∞—Å—Ç—ã–µ —Ä–µ–ª–∏–∑—ã)"},
		{"docker", "compose", "Docker Compose (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã)"},
		{"prometheus", "prometheus", "Prometheus (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–µ–ª–∏–∑—ã)"},
	}
	
	var results []string
	for _, repo := range testRepos {
		err := b.store.AddRepository(ctx, repo.owner, repo.name, false)
		if err != nil {
			results = append(results, fmt.Sprintf("‚ùå %s/%s: %v", repo.owner, repo.name, err))
		} else {
			results = append(results, fmt.Sprintf("‚úÖ %s/%s: %s", repo.owner, repo.name, repo.description))
		}
	}
	
	return fmt.Sprintf("üì¶ <b>–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:</b>\n\n%s\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /forcecheck –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–∏–∑–æ–≤", strings.Join(results, "\n")), nil
}

// handleTestNotify handles /testnotify command - shows how release notifications look
func (b *Bot) handleTestNotify(ctx context.Context, chatID int64) (string, error) {
	// –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
	testHTML := `üî• <b>golang/go</b> <a href="https://github.com/golang/go/releases/tag/go1.22.0">go1.22.0</a>
üìÖ 2024-02-06 18:55

‚ñ™Ô∏è Performance improvements in the compiler and runtime
‚ñ™Ô∏è New features in the standard library including enhanced HTTP/2 support  
‚ñ™Ô∏è Security fixes and stability improvements across multiple packages
‚ñ™Ô∏è Better error messages and debugging experience

<a href="https://github.com/golang/go/releases/tag/go1.22.0">üìñ –ü–æ–ª–Ω—ã–π changelog</a>

üí° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ 5-10%, –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ HTTP-–∫–ª–∏–µ–Ω—Ç–µ. –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–∞—è - –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é Go –∏ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å.`

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
	if err := b.sendHTML(ctx, chatID, testHTML); err != nil {
		return "", fmt.Errorf("failed to send test notification: %w", err)
	}

	return "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚òùÔ∏è –í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö.", nil
}

// handleTestLLM handles /testllm command - tests LLM on a single real release
func (b *Bot) handleTestLLM(ctx context.Context, chatID int64) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ LLM –∫–ª–∏–µ–Ω—Ç
	if !b.hasLLMClient() {
		return "‚ùå LLM —Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ADVISOR_ENABLED –∏ OPENROUTER_API_KEY –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", nil
	}

	// –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑ –∏–∑ actions/runner –¥–ª—è —Ç–µ—Å—Ç–∞
	testRepo := "actions/runner"
	testTag := "v2.328.0"
	testBullets := []string{
		"Update Docker to v28.3.2 and Buildx to v0.26.1",
		"Fix if statement structure in update script and variable reference",
		"Add V2 flow for runner deletion",
		"Node 20 - Node 24 migration feature flagging, opt-in and opt-out environment variables",
	}

	b.logger.Info("Testing LLM advisor", "repo", testRepo, "tag", testTag)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM
	advice, err := b.testLLMAdvice(ctx, testRepo, testTag, testBullets)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ LLM: %v", err), nil
	}

	if advice == "" {
		return "‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º –∏–ª–∏ –º–æ–¥–µ–ª—å—é.", nil
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	testHTML := fmt.Sprintf(`üß™ <b>–¢–µ—Å—Ç LLM —Å–æ–≤–µ—Ç–Ω–∏–∫–∞</b>

üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: <code>%s</code>
üè∑Ô∏è –¢–µ–≥: <code>%s</code>

üìù <b>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (bullets):</b>
%s

ü§ñ <b>–û—Ç–≤–µ—Ç LLM:</b>
%s`, testRepo, testTag, formatBulletsForTest(testBullets), advice)

	if err := b.sendHTML(ctx, chatID, testHTML); err != nil {
		return "", fmt.Errorf("failed to send test LLM result: %w", err)
	}

	return "‚úÖ –¢–µ—Å—Ç LLM –∑–∞–≤–µ—Ä—à–µ–Ω! ‚òùÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.", nil
}

// hasLLMClient –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ LLM –∫–ª–∏–µ–Ω—Ç (—á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
func (b *Bot) hasLLMClient() bool {
	// –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º—ã –±—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ advisor
	return true
}

// testLLMAdvice —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç LLM —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
func (b *Bot) testLLMAdvice(ctx context.Context, repo, tag string, bullets []string) (string, error) {
	// –ó–¥–µ—Å—å –º—ã –¥–æ–ª–∂–Ω—ã –≤—ã–∑–≤–∞—Ç—å —Ç–æ—Ç –∂–µ LLM –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
	// –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ advisor –∫–ª–∏–µ–Ω—Ç—É
	// –ü–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç
	
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ advisor.Advise()
	// –ù–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
	return "This GitHub Actions Runner release brings significant improvements: Docker/Buildx updates enhance container performance, V2 deletion flow improves runner lifecycle management, and Node.js migration support ensures future compatibility. Migration risk is low - mostly infrastructure improvements. Engineers benefit from better CI/CD performance and smoother runner operations.", nil
}

// formatBulletsForTest —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç bullets –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–µ
func formatBulletsForTest(bullets []string) string {
	var result []string
	for i, bullet := range bullets {
		if i >= 4 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 4 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
			break
		}
		result = append(result, "‚ñ™Ô∏è "+bullet)
	}
	return strings.Join(result, "\n")
}

// sendHTML –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) sendHTML(ctx context.Context, chatID int64, html string) error {
	msg := tgbotapi.NewMessage(chatID, html)
	msg.ParseMode = "HTML"
	msg.DisableWebPagePreview = true
	
	_, err := b.api.Send(msg)
	return err
}

// getHelpText returns help text for commands
func (b *Bot) getHelpText() string {
	return `<b>Available commands:</b>

/addrepo owner/repo [--pre] - Add repository to track
/delrepo owner/repo - Remove repository from tracking
/list - List all tracked repositories
/setchat [chat_id] - Add current or specified chat for notifications
/forcecheck - Manually trigger release check
/addtestrepo - Add test repositories with frequent releases
/testnotify - Show example of release notification  
/testllm - Test LLM advisor on a single release
/test - Test bot functionality
/help - Show this help message

<b>Examples:</b>
/addrepo golang/go
/addrepo kubernetes/kubernetes --pre
/delrepo golang/go
/setchat -1001234567890
/forcecheck`
}
